/*
>> Exercício 02 <<

1. A tipagem estática é onde o programador deve informar os tipos de cada dado no sistema, uma vez declarada o seu tipo, as variaveis
    estão restritas ao tipo declarado. Já a tipagem dinamica o programador não precisar informar o tipo, no momento da execução(runtime)
    do programa o tipo é determinado.

2. A tipagem dinamica pode causar erros durante sua exercuçao. Como o tipo de dado é determinado durante sua exercuçao, certas
    incompatibilidades de tipo só serão descorbetas quando o codico tiver sendo exercutado.

3. Um exemplo seria exercutar uma função em javascript:
    const somar = (a,b) => a + b
    somar(2,'2')
    '22'
    Mesmo a função recebendo uma string '2', ela não retornar um erro de tipo de dado imcompátivel

4. C é uma linguagem estática fraca pois suas regras não se aplica totalmente as regras de tipagem e
    permite conversões automaticas nos tipos de dados.
    Um exemplo seria o ponteiro *void, eles apontam para qualquer tipo de dado, e o programador atribui
    o endereço de uma variavel int, float, char e por diante.Logo, o ponteiro pode reinterpretado conforme necessario em tempo de
    exercução.

5. Não, o typerscript não é considerada por ter tipagem fraca por permiter que variaveis de tipo Number aceitar os numeros reais.
    A linguagem é considerada por tipagem forte por sua rigidez de impedir que tipos incorretos sejam atribuidos, como atribui uma string
    a uma variavel do tipo Number.

6. ✓

7. criando o tsconfig.json:
    1. npx tsc --init

    a. Apos configurar no tsconfig o "outDir": "./build", e exercutar o arquivo teste.ts com tsc, criar-se uma pasta
    chamada build como arquivos .js gerados.

    b. "allowUnreachableCode": false ---> com valor false, o typescript detectou erro de um codico que numca será exercutado no arquivo b_teste.ts (codico inalcançavel)
        "allowUnreachableCode": true ---> com valor true, o typecript permitiu o erro do codico inalcançavel

    c. "noImplicitAny": false ---> com valor false, o typscript permitiu que a funçao somar do arquivo c_teste.ts nao houvesse nenhuma notaçao de tipo, retornando any
        para a variavel
        "noImplicitAny": true ---> com valor true, o typescript exigir que a funçao somar tenha a notaçao de tipo, quando inferir any o typer ira emitir erro

    d. com o target definido como "ES3" e o arquivo d_teste.ts com uma classe moderna, transpilado para JS, o typescript gerar um codico compativel com o JS "ES3"
        com uma funçao tradicional:
        "use strict";
        var ely = /** @class */ (function () {
            function ely(nome, number, language) {
                this.nome = nome;
                this.number = number;
                this.language = language;
            }
            return ely;
        }());
        //# sourceMappingURL=d_teste.js.map

        com target definido com "es2016", ele criara a versao moderna:
        "use strict";
        class ely {
            constructor(nome, number, language) {
                this.nome = nome;
                this.number = number;
                this.language = language;
            }
        }
        //# sourceMappingURL=d_teste.js.map

    e. "strictNullChecks": false ---> com valor false, o typescript permite que variaveis com tipo declarado recebam NULL ou UNDEFINED
        "strictNullChecks": true ---> com valor true, o type nao permite que variaveis com tipo recebam null ou undefined, exceto se forem declaradas com null

    d. "sourceMap": true ---> gerar arquivos .map que associam o codico typescript com o javascript gerado, eles permitem uma depuraçao direta em type nos navegadores
*/  
